import{j as t,$ as m,t as d,a as r}from"./utils-2ykXyvw8.js";import{B as n}from"./Button-CNquFYCm.js";import{D as u}from"./DateField-1zKm0fGp.js";import{T as p}from"./TextField-SmpaPHjq.js";import"./index-CBqU2yxZ.js";import"./_commonjsHelpers-BosuxZz1.js";import"./index-BtM5VmRH.js";import"./Field-BP2ue7Hu.js";function l(e){return t(m,{...e,className:d("flex flex-col gap-4",e.className)})}try{l.displayName="Form",l.__docgenInfo={description:"",displayName:"Form",props:{validationErrors:{defaultValue:null,description:`Validation errors for the form, typically returned by a server.
This should be set to an object mapping from input names to errors.`,name:"validationErrors",required:!1,type:{name:"ValidationErrors"}},action:{defaultValue:null,description:`Where to send the form-data when the form is submitted.
See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form#action).`,name:"action",required:!1,type:{name:"string"}},encType:{defaultValue:null,description:`The enctype attribute specifies how the form-data should be encoded when submitting it to the server.
See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form#enctype).`,name:"encType",required:!1,type:{name:"enum",value:[{value:'"application/x-www-form-urlencoded"'},{value:'"multipart/form-data"'},{value:'"text/plain"'}]}},method:{defaultValue:null,description:`The HTTP method to submit the form with.
See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form#method).`,name:"method",required:!1,type:{name:"enum",value:[{value:'"dialog"'},{value:'"get"'},{value:'"post"'}]}},target:{defaultValue:null,description:`The target attribute specifies a name or a keyword that indicates where to display the response that is received after submitting the form.
See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form#target).`,name:"target",required:!1,type:{name:"enum",value:[{value:'"_self"'},{value:'"_blank"'},{value:'"_parent"'},{value:'"_top"'}]}},onSubmit:{defaultValue:null,description:"Triggered when a user submits the form.",name:"onSubmit",required:!1,type:{name:"(event: FormEvent<HTMLFormElement>) => void"}},onReset:{defaultValue:null,description:"Triggered when a user resets the form.",name:"onReset",required:!1,type:{name:"(event: FormEvent<HTMLFormElement>) => void"}},onInvalid:{defaultValue:null,description:"Triggered for each invalid field when a user submits the form.",name:"onInvalid",required:!1,type:{name:"(event: FormEvent<HTMLFormElement>) => void"}},autoComplete:{defaultValue:null,description:`Indicates whether input elements can by default have their values automatically completed by the browser.
See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form#autocomplete).`,name:"autoComplete",required:!1,type:{name:"enum",value:[{value:'"off"'},{value:'"on"'}]}},autoCapitalize:{defaultValue:null,description:`Controls whether inputted text is automatically capitalized and, if so, in what manner. 
See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize).`,name:"autoCapitalize",required:!1,type:{name:"enum",value:[{value:'"none"'},{value:'"off"'},{value:'"on"'},{value:'"sentences"'},{value:'"words"'},{value:'"characters"'}]}},role:{defaultValue:null,description:"An ARIA role override to apply to the form element.",name:"role",required:!1,type:{name:"enum",value:[{value:'"search"'},{value:'"presentation"'}]}},children:{defaultValue:null,description:"The children of the component.",name:"children",required:!1,type:{name:"ReactNode"}},className:{defaultValue:null,description:"The CSS [className](https://developer.mozilla.org/en-US/docs/Web/API/Element/className) for the element.",name:"className",required:!1,type:{name:"string"}},style:{defaultValue:null,description:"The inline [style](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/style) for the element.",name:"style",required:!1,type:{name:"CSSProperties"}}}}}catch{}const S={component:l,parameters:{layout:"centered"},tags:["autodocs"]},a=e=>r(l,{...e,children:[t(p,{label:"Email",name:"email",type:"email",isRequired:!0}),t(u,{label:"Birth date",isRequired:!0}),r("div",{className:"flex gap-2",children:[t(n,{type:"submit",children:"Submit"}),t(n,{type:"reset",variant:"secondary",children:"Reset"})]})]});var o,i,s;a.parameters={...a.parameters,docs:{...(o=a.parameters)==null?void 0:o.docs,source:{originalSource:`(args: any) => <Form {...args}>
    <TextField label="Email" name="email" type="email" isRequired />
    <DateField label="Birth date" isRequired />
    <div className="flex gap-2">
      <Button type="submit">Submit</Button>
      <Button type="reset" variant="secondary">Reset</Button>
    </div>
  </Form>`,...(s=(i=a.parameters)==null?void 0:i.docs)==null?void 0:s.source}}};const E=["Example"];export{a as Example,E as __namedExportsOrder,S as default};
