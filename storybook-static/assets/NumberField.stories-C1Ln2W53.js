import{a as r,ah as y,l as g,j as e,F as V,e as q,$ as F}from"./utils-2ykXyvw8.js";import{B as N}from"./Button-CNquFYCm.js";import{L as x,b as w,I as E,a as d,D as S,F as T}from"./Field-BP2ue7Hu.js";import{c as A}from"./createLucideIcon-DdzWpsi8.js";import{C as I}from"./chevron-down-DbyoNoN6.js";import"./index-CBqU2yxZ.js";import"./_commonjsHelpers-BosuxZz1.js";import"./index-BtM5VmRH.js";const R=A("ChevronUp",[["path",{d:"m18 15-6-6-6 6",key:"153udz"}]]);function n({label:a,description:i,errorMessage:v,...s}){return r(y,{...s,className:g(s.className,"group flex flex-col gap-1"),children:[e(x,{children:a}),e(w,{children:o=>r(V,{children:[e(E,{}),r("div",{className:d({...o,class:"flex flex-col border-s-2"}),children:[e(u,{slot:"increment",children:e(R,{"aria-hidden":!0,className:"w-4 h-4"})}),e("div",{className:d({...o,class:"border-b-2"})}),e(u,{slot:"decrement",children:e(I,{"aria-hidden":!0,className:"w-4 h-4"})})]})]})}),i&&e(S,{children:i}),e(T,{children:v})]})}function u(a){return e(q,{...a,className:"px-0.5 cursor-default text-gray-500 pressed:bg-gray-100 group-disabled:text-gray-200 dark:text-zinc-400 dark:pressed:bg-zinc-800 dark:group-disabled:text-zinc-600 forced-colors:group-disabled:text-[GrayText]"})}try{n.displayName="NumberField",n.__docgenInfo={description:"",displayName:"NumberField",props:{label:{defaultValue:null,description:"",name:"label",required:!1,type:{name:"string"}},description:{defaultValue:null,description:"",name:"description",required:!1,type:{name:"string"}},errorMessage:{defaultValue:null,description:"",name:"errorMessage",required:!1,type:{name:"string | ((validation: ValidationResult) => string)"}},isDisabled:{defaultValue:null,description:"Whether the input is disabled.",name:"isDisabled",required:!1,type:{name:"boolean"}},autoFocus:{defaultValue:null,description:"Whether the element should receive focus on render.",name:"autoFocus",required:!1,type:{name:"boolean"}},onFocus:{defaultValue:null,description:"Handler that is called when the element receives focus.",name:"onFocus",required:!1,type:{name:"(e: FocusEvent<Element, Element>) => void"}},onBlur:{defaultValue:null,description:"Handler that is called when the element loses focus.",name:"onBlur",required:!1,type:{name:"(e: FocusEvent<Element, Element>) => void"}},onFocusChange:{defaultValue:null,description:"Handler that is called when the element's focus status changes.",name:"onFocusChange",required:!1,type:{name:"(isFocused: boolean) => void"}},onKeyDown:{defaultValue:null,description:"Handler that is called when a key is pressed.",name:"onKeyDown",required:!1,type:{name:"(e: KeyboardEvent) => void"}},onKeyUp:{defaultValue:null,description:"Handler that is called when a key is released.",name:"onKeyUp",required:!1,type:{name:"(e: KeyboardEvent) => void"}},decrementAriaLabel:{defaultValue:null,description:'A custom aria-label for the decrement button. If not provided, the localized string "Decrement" is used.',name:"decrementAriaLabel",required:!1,type:{name:"string"}},incrementAriaLabel:{defaultValue:null,description:'A custom aria-label for the increment button. If not provided, the localized string "Increment" is used.',name:"incrementAriaLabel",required:!1,type:{name:"string"}},isWheelDisabled:{defaultValue:null,description:"Enables or disables changing the value with scroll.",name:"isWheelDisabled",required:!1,type:{name:"boolean"}},formatOptions:{defaultValue:null,description:`Formatting options for the value displayed in the number field.
This also affects what characters are allowed to be typed by the user.`,name:"formatOptions",required:!1,type:{name:"NumberFormatOptions"}},isReadOnly:{defaultValue:null,description:"Whether the input can be selected but not changed by the user.",name:"isReadOnly",required:!1,type:{name:"boolean"}},isRequired:{defaultValue:null,description:"Whether user input is required on the input before form submission.",name:"isRequired",required:!1,type:{name:"boolean"}},isInvalid:{defaultValue:null,description:"Whether the input value is invalid.",name:"isInvalid",required:!1,type:{name:"boolean"}},validate:{defaultValue:null,description:'A function that returns an error message if a given value is invalid.\nValidation errors are displayed to the user when the form is submitted\nif `validationBehavior="native"`. For realtime validation, use the `isInvalid`\nprop instead.',name:"validate",required:!1,type:{name:"(value: number) => true | ValidationError"}},value:{defaultValue:null,description:"The current value (controlled).",name:"value",required:!1,type:{name:"number"}},defaultValue:{defaultValue:null,description:"The default value (uncontrolled).",name:"defaultValue",required:!1,type:{name:"number"}},onChange:{defaultValue:null,description:"Handler that is called when the value changes.",name:"onChange",required:!1,type:{name:"(value: number) => void"}},minValue:{defaultValue:null,description:"The smallest value allowed for the input.",name:"minValue",required:!1,type:{name:"number"}},maxValue:{defaultValue:null,description:"The largest value allowed for the input.",name:"maxValue",required:!1,type:{name:"number"}},step:{defaultValue:null,description:'The amount that the input value changes with each increment or decrement "tick".',name:"step",required:!1,type:{name:"number"}},validationBehavior:{defaultValue:{value:"'native'"},description:`Whether to use native HTML form validation to prevent form submission
when the value is missing or invalid, or mark the field as required
or invalid via ARIA.`,name:"validationBehavior",required:!1,type:{name:"enum",value:[{value:'"native"'},{value:'"aria"'}]}},name:{defaultValue:null,description:"The name of the input element, used when submitting an HTML form. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefname).",name:"name",required:!1,type:{name:"string"}},children:{defaultValue:null,description:"The children of the component. A function may be provided to alter the children based on component state.",name:"children",required:!1,type:{name:"ReactNode | ((values: NumberFieldRenderProps) => ReactNode)"}},className:{defaultValue:null,description:"The CSS [className](https://developer.mozilla.org/en-US/docs/Web/API/Element/className) for the element. A function may be provided to compute the class based on component state.",name:"className",required:!1,type:{name:"string | ((values: NumberFieldRenderProps) => string)"}},style:{defaultValue:null,description:"The inline [style](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/style) for the element. A function may be provided to compute the style based on component state.",name:"style",required:!1,type:{name:"CSSProperties | ((values: NumberFieldRenderProps) => CSSProperties)"}}}}}catch{}const k={component:n,parameters:{layout:"centered"},tags:["autodocs"],args:{label:"Cookies"}},l=a=>e(n,{...a}),t=a=>r(F,{className:"flex flex-col gap-2 items-start",children:[e(n,{...a}),e(N,{type:"submit",variant:"secondary",children:"Submit"})]});t.args={isRequired:!0};var m,c,p;l.parameters={...l.parameters,docs:{...(m=l.parameters)==null?void 0:m.docs,source:{originalSource:"(args: any) => <NumberField {...args} />",...(p=(c=l.parameters)==null?void 0:c.docs)==null?void 0:p.source}}};var f,h,b;t.parameters={...t.parameters,docs:{...(f=t.parameters)==null?void 0:f.docs,source:{originalSource:`(args: any) => <Form className="flex flex-col gap-2 items-start">
    <NumberField {...args} />
    <Button type="submit" variant="secondary">Submit</Button>
  </Form>`,...(b=(h=t.parameters)==null?void 0:h.docs)==null?void 0:b.source}}};const z=["Example","Validation"];export{l as Example,t as Validation,z as __namedExportsOrder,k as default};
