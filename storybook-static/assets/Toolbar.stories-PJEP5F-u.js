import{i as u,j as e,ae as f,ax as b,c as v,a as r,m as c}from"./utils-2ykXyvw8.js";import{B as l}from"./Button-CNquFYCm.js";import{C as g}from"./Checkbox-DgG6CCTN.js";import{T as i}from"./ToggleButton-BlJ7hKNw.js";import{c as s}from"./createLucideIcon-DdzWpsi8.js";import"./index-CBqU2yxZ.js";import"./_commonjsHelpers-BosuxZz1.js";import"./index-BtM5VmRH.js";import"./Field-BP2ue7Hu.js";import"./check-yUcLlJWT.js";const N=s("Bold",[["path",{d:"M14 12a4 4 0 0 0 0-8H6v8",key:"v2sylx"}],["path",{d:"M15 20a4 4 0 0 0 0-8H6v8Z",key:"1ef5ya"}]]),x=s("Italic",[["line",{x1:"19",x2:"10",y1:"4",y2:"4",key:"15jd3p"}],["line",{x1:"14",x2:"5",y1:"20",y2:"20",key:"bu0au3"}],["line",{x1:"15",x2:"9",y1:"4",y2:"20",key:"uljnxc"}]]),T=s("Underline",[["path",{d:"M6 4v6a6 6 0 0 0 12 0V4",key:"9kb039"}],["line",{x1:"4",x2:"20",y1:"20",y2:"20",key:"nun2al"}]]),B=u({base:"bg-gray-300 dark:bg-zinc-600 forced-colors:bg-[ButtonBorder]",variants:{orientation:{horizontal:"h-px w-full",vertical:"w-px"}},defaultVariants:{orientation:"horizontal"}});function o(a){return e(f,{...a,className:B({orientation:a.orientation,className:a.className})})}try{o.displayName="Separator",o.__docgenInfo={description:"",displayName:"Separator",props:{orientation:{defaultValue:{value:"'horizontal'"},description:"The orientation of the separator.",name:"orientation",required:!1,type:{name:"enum",value:[{value:'"horizontal"'},{value:'"vertical"'}]}},elementType:{defaultValue:null,description:"The HTML element type that will be used to render the separator.",name:"elementType",required:!1,type:{name:"string"}},className:{defaultValue:null,description:"The CSS [className](https://developer.mozilla.org/en-US/docs/Web/API/Element/className) for the element.",name:"className",required:!1,type:{name:"string"}},style:{defaultValue:null,description:"The inline [style](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/style) for the element.",name:"style",required:!1,type:{name:"CSSProperties"}}}}}catch{}const S=u({base:"flex gap-2",variants:{orientation:{horizontal:"flex-row",vertical:"flex-col items-start"}}});function n(a){return e(b,{...a,className:v(a.className,(h,y)=>S({...y,className:h}))})}try{n.displayName="Toolbar",n.__docgenInfo={description:"",displayName:"Toolbar",props:{orientation:{defaultValue:{value:"'horizontal'"},description:"The orientation of the entire toolbar.",name:"orientation",required:!1,type:{name:"enum",value:[{value:'"horizontal"'},{value:'"vertical"'}]}},children:{defaultValue:null,description:"The children of the component. A function may be provided to alter the children based on component state.",name:"children",required:!1,type:{name:"ReactNode | ((values: ToolbarRenderProps) => ReactNode)"}},className:{defaultValue:null,description:"The CSS [className](https://developer.mozilla.org/en-US/docs/Web/API/Element/className) for the element. A function may be provided to compute the class based on component state.",name:"className",required:!1,type:{name:"string | ((values: ToolbarRenderProps) => string)"}},style:{defaultValue:null,description:"The inline [style](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/style) for the element. A function may be provided to compute the style based on component state.",name:"style",required:!1,type:{name:"CSSProperties | ((values: ToolbarRenderProps) => CSSProperties)"}}}}}catch{}const q={component:n,parameters:{layout:"centered"},tags:["autodocs"]},t=a=>r(n,{"aria-label":"Text formatting",...a,children:[r(c,{"aria-label":"Style",className:"contents",children:[e(i,{"aria-label":"Bold",className:"p-2.5",children:e(N,{className:"w-4 h-4"})}),e(i,{"aria-label":"Italic",className:"p-2.5",children:e(x,{className:"w-4 h-4"})}),e(i,{"aria-label":"Underline",className:"p-2.5",children:e(T,{className:"w-4 h-4"})})]}),e(o,{orientation:a.orientation==="vertical"?"horizontal":"vertical"}),r(c,{"aria-label":"Clipboard",className:"contents",children:[e(l,{variant:"secondary",children:"Copy"}),e(l,{variant:"secondary",children:"Paste"}),e(l,{variant:"secondary",children:"Cut"})]}),e(o,{orientation:a.orientation==="vertical"?"horizontal":"vertical"}),e(g,{children:"Night Mode"})]});var d,m,p;t.parameters={...t.parameters,docs:{...(d=t.parameters)==null?void 0:d.docs,source:{originalSource:`(args: any) => <Toolbar aria-label="Text formatting" {...args}>
    <Group aria-label="Style" className="contents">
      <ToggleButton aria-label="Bold" className="p-2.5">
        <BoldIcon className="w-4 h-4" />
      </ToggleButton>
      <ToggleButton aria-label="Italic" className="p-2.5">
        <ItalicIcon className="w-4 h-4" />
      </ToggleButton>
      <ToggleButton aria-label="Underline" className="p-2.5">
        <UnderlineIcon className="w-4 h-4" />
      </ToggleButton>
    </Group>
    <Separator orientation={args.orientation === 'vertical' ? 'horizontal' : 'vertical'} />
    <Group aria-label="Clipboard" className="contents">
      <Button variant="secondary">Copy</Button>
      <Button variant="secondary">Paste</Button>
      <Button variant="secondary">Cut</Button>
    </Group>
    <Separator orientation={args.orientation === 'vertical' ? 'horizontal' : 'vertical'} />
    <Checkbox>Night Mode</Checkbox>
  </Toolbar>`,...(p=(m=t.parameters)==null?void 0:m.docs)==null?void 0:p.source}}};const M=["Example"];export{t as Example,M as __namedExportsOrder,q as default};
